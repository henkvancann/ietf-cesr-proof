



TODO Working Group                                        P. Feairheller
Internet-Draft                                                     GLEIF
Intended status: Informational                           7 December 2021
Expires: 10 June 2022


                         CESR Proof Signatures
                  draft-pfeairheller-cesr-proof-latest

Abstract

   CESR Proof Signatures are an extension to the Composable Event
   Streaming Representation (CESR) that provide transposable
   cryptographic signature attachments on self-addressing data (SAD).  A
   SAD (such as an Authentic Chained Data Container (ACDC) Verifiable
   Credential) may be signed with a CESR Proof Signature and streamed
   alongside any other CESR content.  In addition, a signed SAD can be
   embedded inside another SAD and the CESR proof signature attachment
   can be transposed to the outer SAD and streamed without losing any
   cryptographic integrity.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/WebOfTrust/ietf-cesr-proof.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 10 June 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Streamable SADs
     1.2.  Nested Partial Signatures
     1.3.  Transposable Signature Attachments
   2.  CESR SAD Path Language
     2.1.  Description and Usage
     2.2.  CESR Encoding for SAD Path Language
     2.3.  SAD Path Examples
   3.  CESR Attachments
     3.1.  CESR Signature Attachments
       3.1.1.  Signing SAD Content
       3.1.2.  Signatures with Non-Transferable Identifiers
       3.1.3.  Signatures with Transferable Identifiers
       3.1.4.  Nested Partial Signatures
     3.2.  Additional Count Codes
       3.2.1.  SAD Path Signature Group
       3.2.2.  SAD Path Groups
     3.3.  Small Variable Raw Size SAD Path Code
   4.  Presentation Exchange
   5.  Selective Disclosure Credentials
   6.  One-Time Use Credentials
   7.  Conventions and Definitions
   8.  Security Considerations
   9.  IANA Considerations
   10. References
     10.1.  Normative References
     10.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   Composable Event Streaming Representation (CESR) is a dual text-
   binary encoding format that has the unique property of text-binary
   concatenation composability.  The CESR specification not only
   provides the definition of the streaming format but also the codes
   needed for creating and sharing all event types and signatures on all
   event types for the Key Event Receipt Infrastructure (KERI).  While
   all KERI event messages are self-addressing data (SAD), there is a
   broad class of SADs that are not KERI events but that require
   signature attachments.  ACDC Verifiable credentials fit into this
   class of SADs.  With more complex data structures represented as
   SADs, such as verifiable credentials, there is a need to provide
   signature attachments on nested subsets of SADs.  Similar to indices
   in indexed controller signatures in KERI that specify the location of
   the public key they represent, nested SAD signatures need a path
   mechanism to specify the exact location of the nested content that
   they are signing.  CESR Proof Signatures provide this mechanism with
   the CESR SAD Path Language and new attachment codes, detailed in this
   specification.

1.1.  Streamable SADs

   A primary goal of CESR Proof Signatures is to allow any self-
   addressing data (SAD) to be streamed inline with any other CESR
   content.  In support of that goal, CESR Proof Signatures leverals
   CESR's attachments to define a signature scheme that can be attached
   to any SAD content serialized as JSON, MessagePack or CBOR.  Using
   this capability, SADs signed with CESR Proof Signatures can be
   streamed inline in either the text or binary domain alongside any
   other KERI event message over, for example TCP or UDP.  In addition,
   signed SADs can be transported via HTTP as a CESR HTTP Request (todo:
   reference needed).

1.2.  Nested Partial Signatures

   Capabilities like selective disclosure and one-time use credentials
   require signatures on nested subsets of SADs.  CESR Proof Signatures
   can be used to sign as many portions of a SAD (including the entire
   SAD) whether the signed subsets are SADs itself or the self-
   addressing identifer (SAID) of a SAD.  Selective disclosure can be
   accomplished when signatures are applied to multiple subsets of a
   SAD.  When using the data in a presentation, like a verifiable
   credential presentation, a selective subset of content and signatures
   can be presented without revealing other portions of the original
   signed SAD.  When the signed content is a SAID, a blinded
   presentation is also possible to allow for receipts on a presentation
   that contains terms or conditions before the actual data is
   presented.  Finally, if a nonce field is added to a signed SAD
   (nested or otherwise), one-time use credentials can be generated by
   treating the SAD as a template and delivered alongside multiple
   nonces and signatures to allow for non-correlatable presentations of
   the same data.

1.3.  Transposable Signature Attachments

   There are several events in KERI that can contain context specific
   embedded self-addressing data (SADs).  Exchange events (exn) for
   peer-to-peer communication and Replay events (rpy) for responding to
   data requests as well as Expose events (exp) for providing anchored
   data are all examples of KERI events that contain embedded SADs as
   part of their payload.  If the SAD payload for one of these event
   types is signed with a CESR attachment, the resulting structure is
   not embeddable in one of the mapping serializations (JSON, CBOR,
   MessagePack) supported by CESR.  To solve this problem, CESR Proof
   Signatures are transposable in that an entire signature group on any
   given SAD can be transposed to attach to the end of an outer SAD
   without losing its meaning.  This unique feature is provided by a
   root path designation in the outermost attachment code of any SAD
   signature group that can be updated to point to the embedding
   location of the outer SAD.  Protocols for verifiable credential
   issuance and proof presentation can be defined using this capability
   to embed the same verifiable credential SAD at and location in an
   outer exn message as appropriate for the protocol without having to
   define a unique signature scheme for each protocol.

2.  CESR SAD Path Language

   CESR Proof Signatures defines a SAD Path Language to be used in
   signature attachments for specifying the location of the SAD content
   within the signed SAD that a signature attachment is verifying.  This
   path language has a more limited scope than alternatives like
   JSONPath and is therefore simpler and easier to encode in CESR
   signature attachments.  SADs in CESR and therefore CESR Proof
   Signatures require static field ordering of all maps.  The SAD path
   language takes advantage of this feature to allow for a base64
   compatible syntax into SADs even when a SAD uses non-base64
   compatible characters for field labels.

2.1.  Description and Usage

   The SAD path language contains a single reserved character, the -
   (dash) character.  Similar to the / (forward slack) character in
   URLs, the - in the SAD Path Language is the path separator between
   components of the path.  The - was selected because it is a one of
   the valid base64 characters.

   The simplest path in the SAD Path Language is a single - character
   representing the root path which specifies the top level of the SAD
   content.

   Root Path ~~~ - ~~~

   After the root path, path components follow, delimited by the -
   character.  Path components may be integer indices into field labels
   or arrays or may be full field labels.  No wildcards are supported by
   the SAD Path Language

   An example SAD Path using only labels that resolve to map contexts
   follows:

   -a-personal

   In addition, integers can be specified and their meaning is dependent
   on the context of the SAD.

   -1-12-personal-0

   The rules for a SAD Path Language processor are simple.  If a path
   consists of only a single -, it represents the root of the SAD and
   therefore the entire SAD content.  Following any - character is a
   path component that points to a field if the current context is a map
   in the SAD or is an index of an element if the current context is an
   array.  It is an error for any sub-path to resolve to a value this is
   not a map or an array.  Any trailing - character in a SAD Path can be
   ignored.

   The root context (after the initial -) is always a map.  Therefore,
   the first path component represents a field of that map.  The SAD is
   traversed following the path components as field labels or indexes in
   arrays until the end of the path is reached.  The value at the end of
   the path is then returned as the resolution of the SAD Path.  If the
   current context is a map and the path component is an integer, the
   path component represents an index into fields of the map.  This
   feature takes advantage of the static field ordering of SADs and is
   used against any SAD that contains field labels that use non-base64
   compatible characters or the - character.  Any combination of integer
   and field label path components can be used when the current context
   is a map.  All path components MUST be an integer when the current
   context is an array.

2.2.  CESR Encoding for SAD Path Language

   SAD Paths are variable raw size primitives that require CESR variable
   size codes.  We reserve the A small variable size code for SAD Paths
   resulting in 3 code entries being added to the Master Code Table,
   4A##, 5A## and 6A## for SAD Paths with 0 lead bytes, 1 lead byte and
   2 lead bytes respecively.  These codes are detailed in Table 2 below.
   The selector not only encodes the table but also implicitly encodes
   the number of lead bytes.  The variable size is measured in quadlets
   of 4 characters each in the T domain and equivalently in triplets of
   3 bytes each in the B domain.  Thus computing the number of
   characters when parsing or off-loading in the T domain means
   multiplying the variable size by 4.  Computing the number of bytes
   when parsing or off-loading in the B domain means multiplying the
   variable size by 3.  The two Base64 size characters provide value
   lengths in quadlets/triplets from 0 to 4095 (64**2 -1).  This
   corresponds to path lengths of up to 16,380 characters (4095 * 4) or
   12,285 bytes (4095 * 3).

2.3.  SAD Path Examples

   This section provides some more examples for SAD Path expressions.
   The examples are based on Authentic Chained Data Containers (ACDCs)
   representing verifiable credentials.

   {
     "v": "ACDC10JSON00011c_",
     "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
     "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
     "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
     "a": {
       "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
       "i": "did:keri:EQzFVaMasUf4cZZBKA0pUbRc9T8yUXRFLyM1JDASYqAA",
       "dt": "2021-06-09T17:35:54.169967+00:00",
       "ri": "did:keri:EymRy7xMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggt",
       "LEI": "254900OPPU84GM83MG36",
       "personal": {
         "legalName": "John Doe",
         "home-city": "Durham"
       }
     },
     "p": [
       {
         "qualifiedIssuerCredential": {
           "d": "EIl3MORH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZA",
           "i": "Et2DOOu4ivLsjpv89vgv6auPntSLx4CvOhGUxMhxPS24"
         }
       },
       {
         "certifiedLender": {
           "d": "EglG9JLG6UhkLrrv012NPuLEc1F3ne5vPH_sHGP_QPN0",
           "i": "E8YrUcVIqrMtDJHMHDde7LHsrBOpvN38PLKe_JCDzVrA"
         }
       }
     ]
   }

   Figure 1.  Example ACDC Credential SAD

   The examples in Table 1 represent all the features of the SAD Path
   language when referring to the SAD in Figure 1. along with the CESR
   text encodeing.

    +==================+========================+=====================+
    | SAD Path         | Result                 | CESR T Domain       |
    |                  |                        | Encoding            |
    +==================+========================+=====================+
    | -                | The root of the SAD    | 6AAA00-             |
    +------------------+------------------------+---------------------+
    | -a-personal      | The personal map of    | 5AAC0-a-personal    |
    |                  | the a field            |                     |
    +------------------+------------------------+---------------------+
    | -4-5             | The personal map of    | 6AAB00-4-5          |
    |                  | the a field            |                     |
    +------------------+------------------------+---------------------+
    | -4-5-legalName   | "John Doe"             | 5AAD0-4-5-legalName |
    +------------------+------------------------+---------------------+
    | -a-personal-1    | "Durham"               | 6AAD00-a-personal-1 |
    +------------------+------------------------+---------------------+
    | -p-1             | The second element in  | 6AAB00-p-1          |
    |                  | the p array            |                     |
    +------------------+------------------------+---------------------+
    | -a-LEI           | "254900OPPU84GM83MG36" | 4AAAB-a-LEI         |
    +------------------+------------------------+---------------------+
    | -p-0-0-d         | "EIl3MORH...6DZA"      | 5AAC0-p-0-0-d       |
    +------------------+------------------------+---------------------+
    | -p-0-certifiedLe | "E8YrUcVI...zVrA"      | 6AAF00-p-0-certifie |
    | nder-i           |                        | dLender-i           |
    +------------------+------------------------+---------------------+

                                  Table 1

3.  CESR Attachments

   This specification adds 2 _Counter Four Character Codes_ to the
   Master Code Table and 1 _Small Variable Raw Size Code Type_ to the
   Master Code Table (which results in 3 new code entries.  The
   additions to the Master Code Table of CESR is shown below:

     +======+===========================+========+==========+========+
     | Code | Description               |  Code  | Count or | Total  |
     |      |                           | Length |  Index   | Length |
     |      |                           |        |  Length  |        |
     +======+===========================+========+==========+========+
     |      | *Counter Four Character   |        |          |        |
     |      | Codes*                    |        |          |        |
     +------+---------------------------+--------+----------+--------+
     | -J## | Count of attached         |   4    |    2     |   4    |
     |      | qualified Base64 SAD path |        |          |        |
     |      | sig groups path+sig group |        |          |        |
     |      | (trans or non-trans)      |        |          |        |
     +------+---------------------------+--------+----------+--------+
     | -K## | Count of attached         |   4    |    2     |   4    |
     |      | qualified Base64 SAD Path |        |          |        |
     |      | groups                    |        |          |        |
     +------+---------------------------+--------+----------+--------+
     |      | *Small Variable Raw Size  |        |          |        |
     |      | Code*                     |        |          |        |
     +------+---------------------------+--------+----------+--------+
     | 4A## | Size of SAD Path with 0   |   4    |    2     |   4    |
     |      | Lead Bytes                |        |          |        |
     +------+---------------------------+--------+----------+--------+
     | 5A## | Size of SAD Path with 1   |   4    |    2     |   4    |
     |      | Lead Byte                 |        |          |        |
     +------+---------------------------+--------+----------+--------+
     | 6A## | Size of SAD Path with 2   |   4    |    2     |   4    |
     |      | Lead Bytes                |        |          |        |
     +------+---------------------------+--------+----------+--------+

                                  Table 2

3.1.  CESR Signature Attachments

   CESR defines several counter codes for attaching signatures to non-
   CESR event messages.  For KERI event messages, the signatures in the
   attachments apply to the entire serialized content of the KERI event
   message.  As all KERI event messages are SADs, the same rules for
   signing a KERI event message applies to sign SAD for CESR Proof
   Signatures.  A brief review of CESR signatures for transferable and
   non-transferable identifiers follows.  In addition, signatures on
   nested content must be specified.

3.1.1.  Signing SAD Content

   The rules for signing SAD content require using the serialized
   version of the SAD as determined by the KERI event message version.
   For any KERI event message or ACDC verifiable credential, the version
   string as found in the v field of the message is used to determine
   the serialization of the SAD and will be one of JSON, CBOR or
   MessagePack.

3.1.2.  Signatures with Non-Transferable Identifiers

   Non-transferable identifiers only ever have one public key.  In
   addition, the identifier prefix is identical to the public key and
   therefore no KEL is required to validate the signature of a non-
   transferable identifier.  The attachment code for witness receipt
   couplets, used for CESR Proof Signatures, takes this into account.
   The four character couner code -C## is used for non-transferable
   identifiers and contains the signing identfier prefix and the
   signature.  Since the verification key is the identifier prefix and
   the identifier can not be rotated, all that is required to validate
   the signature is the identifier prefix, the content signed and the
   signature.

3.1.3.  Signatures with Transferable Identifiers

   Transferable identifiers require full KEL resolution and verfication
   to determine the correct public key used to sign some content.  In
   addition, the attachment code used for transferable identifiers, -F##
   must specify the location in the KEL at which point the signature was
   generated.  To accomplish this, this counter code includes the
   identifier prefix, the sequence number of the event in the KEL, the
   digest of the event in the KEL and the indexed signatures
   (transferable identifiers support multiple public/private keys and
   require index signatures).  Using all the values, one can verify the
   signature(s) by retrieving the KEL of the identifier prefix and
   determine the key state at the sequence number along with validating
   the digest of the event against the actual event.  Then using the
   key(s) at the determined key state, validate the signature(s).

3.1.4.  Nested Partial Signatures

   TODO: Detail the rules for applying the version string of nested
   content to determine serialization.

3.2.  Additional Count Codes

   This specification adds two Counter Four Character Codes to the CESR
   Master Code Table for attaching and grouping transposable signatures
   on SAD and nested SAD content.  The first code (-J##) is reserved for
   attaching a SAD path and the associated signatures on the content at
   the resolution of the SAD Path (either a SAD or its associated SAID).
   The second reserved code (-K##) is for grouping all SAD Path
   signature groups under a root path for a given SAD.  The root path in
   the second grouping code provides signature attachment
   transposability for embedding SAD content in other messages.

3.2.1.  SAD Path Signature Group

   The SAD Path Signature Group provides a four character counter code,
   -J##, for attaching an encoded variable length SAD Path along with
   either transferable index signature groups or non-transferable
   identifer receipt couplets.  The SAD Path identifies the content that
   this attachment is signing.  The path must resolve to either a nested
   SAD (map) or a SAID (string) of an externally provided SAD within the
   context of the SAD and root path against which this attachment is
   applied.  Using the sample ACDC SAD above, the follow example shows a
   signature on the nested personal SAD signed by a transferable
   identifier using the transferable index signature group.  The example
   is annotated with comments, spaces and line feeds for clarity.

-JAB              # SAD path signature group counter code 1 following the group
5AAC0-a-personal  # encoded SAD path designation
-FAB     # Trans Indexed Sig Groups counter code 1 following group
E_T2_p83_gRSuAYvGhqV3S0JzYEF2dIa-OCPLbIhBO7Y    # trans prefix of signer for sigs
-EAB0AAAAAAAAAAAAAAAAAAAAAAB    # sequence number of est event of signer's public keys for sigs
EwmQtlcszNoEIDfqD-Zih3N6o5B3humRKvBBln2juTEM      # digest of est event of signer's public keys for sigs
-AAD     # Controller Indexed Sigs counter code 3 following sigs
AA5267UlFg1jHee4Dauht77SzGl8WUC_0oimYG5If3SdIOSzWM8Qs9SFajAilQcozXJVnbkY5stG_K4NbKdNB4AQ         # sig 0
ABBgeqntZW3Gu4HL0h3odYz6LaZ_SMfmITL-Btoq_7OZFe3L16jmOe49Ur108wH7mnBaq2E_0U0N0c5vgrJtDpAQ    # sig 1
ACTD7NDX93ZGTkZBBuSeSGsAQ7u0hngpNTZTK_Um7rUZGnLRNJvo5oOnnC1J2iBQHuxoq8PyjdT3BHS2LiPrs2Cg  # sig 2

   The next example demostrates the use of a non-transferable identifier
   to sign SAD content.  In this example, the entire nested SAD located
   at the a field is signed by the non-transferable identfier:

-JAB       # SAD path signature group counter code 1 following the group
5AAA0-a    # encoded SAD path designation
-CAB       # NonTrans witness receipt couplet
BmMfUwIOywRkyc5GyQXfgDA4UOAMvjvnXcaK9G939ArM  # non-trans prefix of signer of sig
0BT7b5PzUBmts-lblgOBzdThIQjKCbq8gMinhymgr4_dD0JyfN6CjZhsOqqUYFmRhABQ-vPywggLATxBDnqQ3aBg  # sig

3.2.2.  SAD Path Groups

   The SAD Path Group provides a four character counter code, -K##, for
   attaching encoded variable length *root* SAD Path along with 1 or
   more SAD Path Signature Groups.  The root SAD Path identifies the
   root context against which the paths in all included SAD Path
   Signature Groups are resolved.  When parsing a SAD Path Group, if the
   root path is the single - character, all SAD paths are treated as
   absolute paths.  Otherwise, the root path is prepended to the SAD
   paths in each of the SAD Path Signature Groups.  Given the following
   snippet of a SAD Path Group:

   -KAB6AAA00--JAB5AAA0-a...

   The root path is the single - character meaning that all subsequent
   SAD Paths are absolute and therefore the first path is resolved as
   the a field of the root map of the SAD as seen in the following
   example:

   {
     "v": "ACDC10JSON00011c_",
     "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
     "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
     "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
     "a": {   // SIGNATURE TARGET OF SAD PATH GROUP
       "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
       "i": "did:keri:EQzFVaMasUf4cZZBKA0pUbRc9T8yUXRFLyM1JDASYqAA",
       "dt": "2021-06-09T17:35:54.169967+00:00",
       "ri": "did:keri:EymRy7xMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggt",
       "LEI": "254900OPPU84GM83MG36",
       "personal": {
         "legalName": "John Doe",
         "home-city": "Durham"
       }
     }

3.2.2.1.  Transposable Signature Attachments

   To support nesting of signed SAD content in other SAD content the
   root path of SAD Path Groups provides transposability of CESR SAD
   signatures such that the entire SAD Path Group attachment can be
   transposed to the surrounding SAD by updating the root path to
   indicate the new location Extending the sample above, the SAD content
   is now embedded in a KERI exn event message as follows:

   {
     "v": "KERI10JSON00011c_",
     "t": "exn",
     "dt": "2020-08-22T17:50:12.988921+00:00"
     "r": "/credential/apply"
     "a": {
       "v": "ACDC10JSON00011c_",
       "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
       "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
       "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
       "a": {   // SIGNATURE TARGET OF TRANSPOSED SAD PATH GROUP
         "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
         "i": "did:keri:EQzFVaMasUf4cZZBKA0pUbRc9T8yUXRFLyM1JDASYqAA",
         "dt": "2021-06-09T17:35:54.169967+00:00",
         "ri": "did:keri:EymRy7xMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggt",
         "LEI": "254900OPPU84GM83MG36",
         "personal": {
           "legalName": "John Doe",
           "home-city": "Durham"
         }
       }
     }

   The same signature gets transposed to the outer exn SAD by updating
   the root path of the -K## attachment:

   -KAB5AAA0-a-JAB5AAA0-a...

   Now the SAD Path of the first signed SAD content resolves to the a
   field of the a field of the streamed exn message

3.3.  Small Variable Raw Size SAD Path Code

   The small variable raw side code reserved for SAD Path encoding is A
   which results in the addition of 3 entries (4A##, 5A## and 6A##) in
   the Master Code Table for each lead byte configuration.  These codes
   and their use are discussed in detail in CESR Encoding for SAD Path
   Language.

4.  Presentation Exchange

5.  Selective Disclosure Credentials

6.  One-Time Use Credentials

7.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

8.  Security Considerations

   TODO Security

9.  IANA Considerations

   This document has no IANA actions.

10.  References

10.1.  Normative References

   [CESR]     Smith, S., "Composable Event Streaming Representation
              (CESR)", 2021,
              <https://datatracker.ietf.org/doc/draft-ssmith-cesr/>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [SAID]     Smith, S., "Self-Addressing IDentifier (SAID)", 2021,
              <https://datatracker.ietf.org/doc/draft-ssmith-said/>.

10.2.  Informative References

   [JSON]     "JavaScript Object Notation Delimeters", n.d.,
              <https://www.json.org/json-en.html>.

   [JSONPath] "JSONPath -- XPath for JSON", n.d.,
              <https://tools.ietf.org/id/draft-goessner-dispatch-
              jsonpath-00.html>.

   [KERI]     Smith, S., "Key Event Receipt Infrastructure (KERI)",
              2021, <https://arxiv.org/abs/1907.02143>.

Acknowledgments

   Dr Sam Smith, Kevin Griffin and the Global Legal Entity Identifier
   Foundation (GLEIF)

Author's Address

   Phil Feairheller
   GLEIF

   Email: Philip.Feairheller@gleif.org
